class MealyError(Exception):
    pass


class StateMachine:
    def __init__(self):
        self.state = 'A'

    def bend(self):
        if self.state == 'A':
            self.state = 'B'
            return 0
        if self.state == 'B':
            self.state = 'C'
            return 1
        if self.state == 'D':
            self.state = 'B'
            return 6
        if self.state == 'F':
            self.state = 'A'
            return 10
        if self.state == 'G':
            self.state = 'H'
            return 11
        raise MealyError('bend')

    def debug(self):
        if self.state == 'C':
            self.state = 'D'
            return 3
        if self.state == 'D':
            self.state = 'E'
            return 5
        if self.state == 'F':
            self.state = 'D'
            return 9
        if self.state == 'B':
            self.state = 'F'
            return 2
        if self.state == 'E':
            self.state = 'F'
            return 7
        raise MealyError('debug')

    def chain(self):
        if self.state == 'C':
            self.state = 'E'
            return 4
        if self.state == 'F':
            self.state = 'G'
            return 8
        raise MealyError('chain')


def main():
    return StateMachine()


def raises(func, error):
    output = None
    try:
        output = func()
    except Exception as e:
        assert type(e) == error
    assert output is None


def test():
    o = main()
    assert o.bend() == 0
	assert o.bend() == 1
	assert o.debug() == 3
	assert o.bend() == 6
	assert o.bend() == 1
	assert o.chain() == 4
	assert o.debug() == 7
	assert o.debug() == 9
	assert o.debug() == 5
	assert o.debug() == 7
	assert o.bend() == 10
	assert o.bend() == 0
	assert o.debug() == 2
	assert o.chain() == 8
	assert o.bend() == 11
    raises(lambda: o.stand(), MealyError)
    raises(lambda: o.punch(), MealyError)
    raises(lambda: o.spin(), MealyError)
